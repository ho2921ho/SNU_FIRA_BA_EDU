#R commands are entered at the prompt in the R console window.
a <- 2
a
x <- c(1 ,2 ,3)
x
a+2
xsq = x^2
xsq
rnorm (15)
#--- 1. Prussian horsekick data (p. 32)
k = c(0, 1, 2, 3, 4)
x = c(109 , 65, 22, 3, 1)
p = x / sum (x) # relative frequencies
print (p)
par ( mfrow = c(1 ,2)) #multiple graphs
barplot (x, names = k); pie(x)
r = sum (k * p) # mean
v = sum (x * (k - r)^2) / 199 # variance
f = dpois (k, r) #poisson density, 단위 시간당 죽음이 일어날 횟수에 대한 기대값이 r일때, k번 일어날 확률
print( cbind (k, p, f)) # 사망수, 실제 사망수 비율, 포아송 분포(기대값 0.61일때)로부터의 사망수 확률
f = dpois (k, r) #poisson density, 단위 시간당 죽음이 일어날 횟수에 대한 기대값이 r일때, k번 일어날 확률
f
#sample function : random sampling from finite population
sample (1:40 ,5)
sample (c("H","T"), 10, replace =T)
sample (c("s", "f"), 10, replace =T, prob =c(0.9 , 0.1))
#dnorm, pnorm, qnorm, and rnorm
x = seq ( -4 ,4 ,0.1); pp = seq (0 ,1 ,0.001);
par( mfrow = c(2,2))
plot (x, dnorm(x), type = "l")       #Density or point probability
plot (x, pnorm(x), type = "l")       #Cumulated probability, distribution function
plot (pp , qnorm (pp), type = "l")    #Quantiles
plot ( rnorm (200))                   #random numbers
qnorm (pp)
# Example 1: plot, text and abline
par (mfrow = c(1 ,1))
x <- runif(50,0,2); y <- runif(50,0,2) #random sample in uniform(0,2) distribution
plot (x, y, main =" Main title ", sub =" subtitle ",
xlab ="x- label ", ylab ="y- label ")
abline (a = 0.5 , b = 1) #a: intercept, b : slope
abline (h = 0.5 , col = 'red ')
abline (v = 0.5 , col = " blue ")
text (0.5 ,0.6 , " text at x = 0.5 , y = 0.6 ")
# Example 2: plot, text and lines
head ( USArrests )
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
# Example 2: plot, text and lines
head ( USArrests )
attach ( USArrests )
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5) #cex : scaling of text
localregfit <- lowess ( Assault ~ Murder )
#lowess returns an object containing components x and y which give the coordinates of the smooth
#추세선 찾는 방법 중 하나.
lines ( localregfit $x, localregfit $y)
# Example 3: Print the rownames instead of symbols
plot ( Murder , Assault , type = "n")
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5)
localregfit <- lowess ( Assault ~ Murder )
#lowess returns an object containing components x and y which give the coordinates of the smooth
#추세선 찾는 방법 중 하나.
lines ( localregfit $x, localregfit $y)
# Example 4: Scatterplot matrix for multi-variate data frame
plot( USArrests ) #or
pairs( USArrests )
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
pairs( USArrests )
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5) #cex : scaling of text
# Example 4: Scatterplot matrix for multi-variate data frame
plot( USArrests ) #or
plot ( Murder , Assault , pch = 20, col = " red ") #pch : plotting character
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5) #cex : scaling of text
localregfit <- lowess ( Assault ~ Murder )
#lowess returns an object containing components x and y which give the coordinates of the smooth
#추세선 찾는 방법 중 하나.
lines ( localregfit $x, localregfit $y)
# Example 3: Print the rownames instead of symbols
plot ( Murder , Assault , type = "n")
text ( Murder , Assault , rownames ( USArrests ), cex = 0.5)
# Example 4: Scatterplot matrix for multi-variate data frame
plot( USArrests ) #or
pairs( USArrests )
if(1==0){
print(1)
}else{
print(2)
}
if(1==0){
print(1)
}else{
print(2)
}
# Conditional Executions: ifelse statement operates on vectors
x <- 1:10
ifelse (x <5, x, 0)
# Conditional Executions: ifelse statement operates on vectors
x <- 1:10
ifelse (x <5, x, 0)
x
# for Loops : Loops over a fixed set of values
x <- seq (0, 1 ,.05)
# for Loops : Loops over a fixed set of values
x <- seq (0, 1 ,.05)
plot (x, x, ylab ="y", type ="l")
for ( j in 2:8 ) lines (x, x^j)
# while Loops: Iterates as long as a condition is true
z <- 0
while(z <5){
z <- z + 2
print (z)
}
# while Loop with break statement
z <- 0
while(T) {
z <- z+ 1
print(z)
if(z>2) break
}
apply ( USArrests , 2, mean )
apply ( USArrests , 2, mean )
#library(ISwR)
lapply(thuesen, mean, na.rm=T)
apply ( USArrests , 2, mean )
library(ISwR)
install.packages('ISwR')
library(ISwR)
lapply(thuesen, mean, na.rm=T)
lapply(thuesen, mean, na.rm=T)
sapply ( thuesen , mean , na.rm=T)
apply ( USArrests, mean )
apply ( USArrests , 2, mean )
lapply(thuesen, 2, mean, na.rm=T)
#tapply : factor에 따라 첫번째 인자의 function값을 출력
#median of energy expenditure for each level (lean, obese)
data ( energy )
tapply ( energy $ expend , energy $ stature , median )
tapply ( energy $ expend , energy $ stature , median )
is(energy$stature)
# R function example 1
myfn <- function (x1 , x2 =5) {
z1 <- x1 / x1
z2 <- x2 * x2
myvec <- c(z1 , z2)
return ( myvec )
}
myfn(x1=2, x2=3)
myfn(2,3)
x <- myfn(5); x
# R function example 2
hist.with.normal <- function (x, xlab = deparse (substitute(x)) ,...){
h <- hist (x, plot =F, ...)
s <- sd(x)
m <- mean (x)
ylim <- range (0,h$ density , dnorm (0, sd=s)) #min, max value
hist (x, freq =F, ylim =ylim , xlab =xlab , ...)
curve ( dnorm (x,m,s), add =T)
}
hist.with.normal(USArrests$Murder)
substitute(x)
x <- myfn(5); x
substitute(x)
x
substitute(x)
