tmp = c()
for ( i in length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
table(tmp)
table(tmp)
tmp = c()
for ( i in length(a))
{
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
table(tmp)
tmp = rep(NA, length(b))
for ( i in length(a))
b = a[[1]]
source('C:/Users/renz/Desktop/R_전종준/6. Text function_필기분.R', encoding = 'UTF-8', echo=TRUE)
# -----------------------------
# 문자열의 단어 개수를 계산해주는 함수.
nchar(c("South Pole", "한글 문자열", NA))
# -----------------------------
# 문자렬 내에서 위치를 참조하여 문자열을 반환하는 함수.
substr("Equator", start=2, stop=4)
strsplit("6*16*2011", split = '\\*')
tmp = c()
for ( i in length(a))
{
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
table(tmp)
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
table(tmp)
for ( i in length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
table(tmp)
tmp = rep(NA, length(b))
tmp = c()
for ( i in length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
for ( i in length(a)){
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
tmp = rep(NA, length(b))
for ( i in length(a))
b = a[[1]]
if (length(b) == 2)
{
tmp[i] = tail.(b, n = 1)
}
table(tmp)
tmp = c()
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmp
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmp
tmp = c()
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmp
tmp = c()
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmptmp = c()
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmptmp = c()
#tmp = rep(NA, length(a))
for (i in 1:length(a)){
b = a[[i]]
if (length(b) == 2){
tmp = c(tmp, tail(b, n = 1))
#tmp[i] = tail(b, n = 1)
}
}
tmp
tmp = c()
for ( i in length(a))
tmp = c()
tmp
tmp
-------------------
# 문자열을 지정한 문자로 분리시켜주는 함수
strsplit("6-16-2011", split = '-')
a = strsplit(c("6-16-2011","1-1-2-1"), split = '-')
# # 참조할 때는 a[[1]],a[[2]] 이런식으로 리스트이기 때문에.
a[[1]]
# -----------------------------
# * 그냥 쓰면 모든 문자로 분리하라는 뜻.
strsplit("6*16*2011", split = '*')
strsplit("6-16-2011", split = '-')
tmp = c()
tmp = c()
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
a = strsplit(list.files(), split = '.', fixed = TRUE)
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail.(b, n = 1))
}
}
tmp = c()
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail(b, n = 1))
}
}
tmp
tmp = rep(NA,lenght(a))
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp[i] = tail(b, n = 1)
}
}
tmp
tmp = c()
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail(b, n = 1))
}
}
tmp
list.files()
tmp = c()
for ( i in 1 : length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp = c(tmp, tail(b, n = 1))
}
}
tmp
a = strsplit(list.files(), split = '.', fixed = TRUE)
a
b = a[[i]]
b
a
## 혼자 정리 해보기...
question = ' 58~88 두개가 왜 다른 걸까?'
grep(pattern = '^(a,b){2,3}', x = 'abab')
grep(pattern = '^(a,b){2,3}', x = 'a,bab')
print(question)
question
## 혼자 정리 해보기...
question = ' 58~88 두개가 왜 다른 걸까?'
question
question
## 혼자 정리 해보기...
question = ' 58~88 두개가 왜 다른 걸까?'
