cv.error.10 = rep(0,10)
for (i in 1:10){
lda.fit = lda(ideo_self~poly(.,i), data = rd_selected)
cv.error.10[i] = cv.lda(rd_selected,lda.fit, k = 10)$delta[1]
}
names(rd_selected)
set.seed(1)
cv.error.10 = rep(0,10)
names(rd_selected)
for (i in 1:10){
lda.fit = lda(ideo_self~poly(c(sex,age),i), data = rd_selected)
cv.error.10[i] = cv.lda(rd_selected,lda.fit, k = 10)$delta[1]
}
set.seed(1)
cv.error.10 = rep(0,10)
names(rd_selected)
for (i in 1:10){
lda.fit = lda(ideo_self~poly(sex,i), data = rd_selected)
cv.error.10[i] = cv.lda(rd_selected,lda.fit, k = 10)$delta[1]
}
library(boot)
set.seed(1)
cv.error.10 = rep(0,10)
names(rd_selected)
for (i in 1:10){
lda.fit = lda(ideo_self~poly(sex,i), data = rd_selected)
cv.error.10[i] = cv.lda(rd_selected,lda.fit, k = 10)$delta[1]
}
set.seed(1)
cv.error.10 = rep(0,10)
names(rd_selected)
for (i in 1:10){
lda.fit = lda(ideo_self~poly(sex,i), data = rd_selected)
cv.error.10[i] = cv.glm(rd_selected,lda.fit, k = 10)$delta[1]
}
install.packages("crossval")
library(crossval)
names(rd)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(dplyr)
library(ggmap)
library(maps)
library(mapdata)
library(ggplot2)
library(broom)
library(knitr)
rd = read.csv('C:/Users/renz/Desktop/장성규 기말/Final/mobility.csv')
attach(rd)
ggplot(data = rd, aes(x = Longitude, y = Latitude, col = Mobility)) +
geom_point() +
scale_color_gradient(low="grey", high="black")
rd_map <- rd %>% filter(!is.na(rd$Mobility))
rd_map$MobilityCat <- ifelse(rd_map$Mobility > 0.1, "high","low")
rd_map <- rd_map %>% filter(Longitude > -145, Latitude < 50)
ggplot(data = rd_map, aes(x = rd_map$Longitude, y = rd_map$Latitude, col = rd_map$MobilityCat)) +
geom_point()
par(mar = rep(2, 4))
par(mfrow = c(4,2))
index = c(5,13,8,15,22,38,12)
coef_table = NULL
for (i in index){
plot(Mobility~rd[,i], main = names(rd)[i])
lm.fit = lm(Mobility~rd[,i])
abline(lm.fit, col = "red")
temp = tidy(lm(rd$Mobility~rd[,i]))[2,]
temp$term = names(rd)[i]
coef_table = rbind(coef_table,temp)
}
kable(coef_table, caption = "A bunch of simple regression models")
rd_selec <- rd[-c(1,2,4,42,43)]
lm_rd_selec = lm(Mobility ~., data = rd_selec)
coef_table_selected = tidy(lm_rd_selec)
coef_table
coef_table_selected[c(2,10,5,12,19,35,9),]
library(car)
vif(lm.rd)
index = vif(lm.rd) > 10
coef_table
coef_table_selected[c(2,10,5,12,19,35,9),]
library(car)
vif(llm_rd_selec)
library(car)
vif(lm_rd_selec)
print(attr(vif(lm_rd_selec),"names")[vif(lm_rd_selec) > 10])
index = vif(lm_rd_selec) > 10
pairs(rd[-1][,index])
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
rd$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
rd_subset = subset(rd, select = - c(Seg_affluence,Seg_income,Seg_poverty,Gini,Single_mothers))
lm.rd_subset = lm(rd$Mobility~., data = rd_subset)
vif(lm.rd_subset)
rd_subset
names(rd_subset)
Raw = read.csv('C:/Users/renz/Desktop/장성규 기말/Final/mobility.csv')
ggplot(data = Raw, aes(x = Longitude, y = Latitude, col = Mobility)) +
geom_point() +
scale_color_gradient(low="grey", high="black")
map <- Raw %>% filter(!is.na(rd$Mobility))
map$MobilityCat <- ifelse(rd_map$Mobility > 0.1, "high","low")
map$MobilityCat <- ifelse(map$Mobility > 0.1, "high","low")
map <- map %>% filter(Longitude > -145, Latitude < 50)
ggplot(data = map, aes(x = map$Longitude, y = map$Latitude, col = map$MobilityCat)) +
geom_point()
par(mar = rep(2, 4))
par(mfrow = c(4,2))
index = c(5,13,8,15,22,38,12)
# 설명변수로 쓰고자 하는 항목만 단일회귀분석을 진행한다.
coef_table_simples = NULL
for (i in index){
plot(Mobility~Raw[,i], main = names(Raw)[i])
lm.fit = lm(Mobility~Raw[,i])
abline(lm.fit, col = "red")
temp = tidy(lm(Raw$Mobility~Raw[,i]))[2,]
temp$term = names(Raw)[i]
coef_table = rbind(coef_table,temp)
}
kable(coef_table, caption = "A bunch of simple regression models")
par(mar = rep(2, 4))
par(mfrow = c(4,2))
index = c(5,13,8,15,22,38,12)
# 설명변수로 쓰고자 하는 항목만 단일회귀분석을 진행한다.
coef_table_simples = NULL
for (i in index){
plot(Mobility~Raw[,i], main = names(Raw)[i])
lm.fit = lm(Mobility~Raw[,i])
abline(lm.fit, col = "red")
temp = tidy(lm(Raw$Mobility~Raw[,i]))[2,]
temp$term = names(Raw)[i]
coef_table_simples = rbind(coef_table_simples,temp)
}
library(dplyr)
library(ggmap)
library(maps)
library(mapdata)
library(ggplot2)
library(broom)
library(knitr)
Raw = read.csv('C:/Users/renz/Desktop/장성규 기말/Final/mobility.csv')
attach(rd)
ggplot(data = Raw, aes(x = Longitude, y = Latitude, col = Mobility)) +
geom_point() +
scale_color_gradient(low="grey", high="black")
map <- Raw %>% filter(!is.na(rd$Mobility))
map <- Raw %>% filter(!is.na(Raw$Mobility))
map$MobilityCat <- ifelse(map$Mobility > 0.1, "high","low")
map <- map %>% filter(Longitude > -145, Latitude < 50)
ggplot(data = map, aes(x = map$Longitude, y = map$Latitude, col = map$MobilityCat)) +
geom_point()
par(mar = rep(2, 4))
par(mfrow = c(4,2))
index = c(5,13,8,15,22,38,12)
# 설명변수로 쓰고자 하는 항목만 단일회귀분석을 진행한다.
coef_table_simples = NULL
for (i in index){
plot(Mobility~Raw[,i], main = names(Raw)[i])
lm.fit = lm(Mobility~Raw[,i])
abline(lm.fit, col = "red")
temp = tidy(lm(Raw$Mobility~Raw[,i]))[2,]
temp$term = names(Raw)[i]
coef_table_simples = rbind(coef_table_simples,temp)
}
kable(coef_table_simples, caption = "A bunch of simple regression models")
rd_selec <- rd[-c(1,2,4,42,43)]
par(mar = rep(2, 4))
par(mfrow = c(4,2))
index = c(5,13,8,15,22,38,12)
# 설명변수로 쓰고자 하는 항목만 단일회귀분석을 진행한다.
coef_table_simples = NULL
for (i in index){
plot(Mobility~Raw[,i], main = names(Raw)[i])
lm.fit = lm(Mobility~Raw[,i])
abline(lm.fit, col = "red")
temp = tidy(lm(Raw$Mobility~Raw[,i]))[2,]
temp$term = names(Raw)[i]
coef_table_simples = rbind(coef_table_simples,temp)
}
kable(coef_table_simples, caption = "A bunch of simple regression models")
Raw_used <- Raw[-c(1,2,4,42,43)]
Raw_use <- Raw[-c(1,2,4,42,43)]
lm_mul = lm(Mobility ~., data = Raw_use)
Raw_use <- Raw[-c(1,2,4,42,43)]
lm_mul = lm(Mobility ~., data = Raw_use)
coef_table_mul = tidy(Raw_used)
Raw_use <- Raw[-c(1,2,4,42,43)]
lm_mul = lm(Mobility ~., data = Raw_use)
coef_table_multiple = tidy(lm_mul)
coef_table
coef_table_simples
coef_table_multiple [c(2,10,5,12,19,35,9),]
library(car)
vif(lm_rd_selec)
library(car)
vif(lm_mul)
print(attr(vif(lm_mul),"names")[vif(lm_rd_selec) > 10])
library(car)
vif(lm_mul)
print(attr(vif(lm_mul),"names")[vif(lm_rd_selec) > 10])
library(car)
vif(lm_mul)
print(attr(vif(lm_mul),"names")[vif(lm_mul) > 10])
index = vif(lm_mul) > 10
pairs(Raw_use[-1][,index])
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
rd$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
Raw_use$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
Raw_use_subset = subset(Raw_use, select = - c(Seg_affluence,Seg_income,Seg_poverty,Gini,Single_mothers))
names(rd_subset)
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
Raw_use$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
Raw_use_subset = subset(Raw_use, select = - c(Seg_affluence,Seg_income,Seg_poverty,Gini,Single_mothers))
names(Raw_use_subset)
lm.rd_subset = lm(rd$Mobility~., data = rd_subset)
lm_mul_subset = lm(rd$Mobility~., data = Raw_use_subset)
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
Raw_use$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
Raw_use_subset = subset(Raw_use, select = - c(Seg_affluence,Seg_income,Seg_poverty,Gini,Single_mothers))
names(Raw_use_subset)
lm_mul_subset = lm(Mobility~., data = Raw_use_subset)
vif(lm.rd_subset)
sum(is.na(Seg_affluence))
sum(is.na(Seg_income))
sum(is.na(Seg_poverty))
Raw_use$Seg_wealth = (Seg_affluence+Seg_income+Seg_poverty)/3
Raw_use_subset = subset(Raw_use, select = - c(Seg_affluence,Seg_income,Seg_poverty,Gini,Single_mothers))
names(Raw_use_subset)
lm_mul_subset = lm(Mobility~., data = Raw_use_subset)
vif(lm_mul_subset)
AnBnC = is.na(Colleges) & is.na(Tuition) & is.na(Graduation)
AnB = is.na(Colleges) & is.na(Tuition)
sum(AnB)-sum(AnBnC)
rd %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
names(Raw)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select("ID"","Colleges","Tuition"","Graduation")
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select("ID"","Colleges","Tuition"","Graduation")
attach(RaW)
attach(Raw)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation))
attach(Raw)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw_use %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
names(Raw)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation))
%>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation))
a <- Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation))
View(a)
a <- Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
a <- Raw %>% filter(is.na(Colleges) & is.na(Tuition) & !is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
a %>% select(ID,Colleges,Tuition,Graduation)
a %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
library(dplyr)
library(ggmap)
library(maps)
library(mapdata)
library(ggplot2)
library(broom)
library(knitr)
Raw = read.csv('C:/Users/renz/Desktop/장성규 기말/Final/mobility.csv')
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(.$ID,.$Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID,Colleges,Tuition,Graduation)
Raw %>% filter(!is.na(Colleges) & !is.na(Tuition) & is.na(Graduation)) %>% select(ID, Colleges, Tuition, Graduation)
source('C:/Users/renz/Desktop/고급 빅데이터 분석/실습자료/ch2_lab/ch2_code.R', encoding = 'UTF-8', echo=TRUE)
cereals = read.csv("cereals.csv",header=T)
names(cereals)
summary(cereals)
dim(cereals)
cereals = cereals[, c("name","calories","protein","fat","sodium","fiber","carbo","sugars","potass","vitamins")]
cereals = cereals[, c("name","calories","protein","fat","sodium","fiber","carbo","sugars","potass","vitamins")]
dim(cereals)
## missing value가 있는 자료는 삭제
cereals[!complete.cases(cereals),] #na.omit(cereals)
cereals = cereals[complete.cases(cereals),]
dim(cereals)
dim(cereals)
length(which(is.na(cereals)))
rownames(cereals) = cereals[,"name"]
head(cereals,6)
cereals = cereals[,-1]
head(cereals,6)
## 산포도 확인
plot(cereals)
head(cereals,6)
## 산포도 확인
plot(cereals)
#k1=3
dist.E =dist(cereals)
dist.E
cluster.EC = hclust(dist.E)
plot(cluster.EC, main="Euclidean, complete", cex=1)
cluster.ES = hclust(dist.E, method="single")
plot(cluster.ES, main="Euclidean, single")
cluster.EA = hclust(dist.E, method="average")
plot(cluster.EA, main="Euclidean, average")
## 군집 분할(할당)
clusters = cutree(cluster.EC, k=2:6) #군집 수 조절
head(clusters)
clusters = cutree(cluster.EC, h=100) #덴드로그램의 높이 조절
clusters[1:10]
## 군집 분할(할당)
clusters = cutree(cluster.EC, k=2:6) #군집 수 조절
clusters = cutree(cluster.EC, h=100) #덴드로그램의 높이 조절
# 덴드로그램에서 할당
plot(cluster.EC, main="Euclidean, complete")
# 덴드로그램에서 할당
plot(cluster.EC, main="Euclidean, complete")
groups = cutree(cluster.EC, h=100)
head(groups,20)
rect.hclust(cluster.EC, h=100, border="red")
# 덴드로그램에서 할당
plot(cluster.EC, main="Euclidean, complete")
groups = cutree(cluster.EC, h=100)
head(groups,20)
rect.hclust(cluster.EC, h=100, border="red")
plot(cluster.EC, main="Euclidean, complete")
groups = cutree(cluster.EC, k=4)
head(groups,20)
rect.hclust(cluster.EC, k=4, border="red") # draw denrogram with red borders around the k1 clusters
for (i in 1:4){
cat(i,'- th cluster \n')
tmp = rbind(round(colMeans(cereals[which(groups==i),]), 3),
round(diag(cov(cereals[which(groups==i),])), 3)); rownames(tmp) = c("Mean","Var")
print(tmp)
}
table(groups)
for (i in 1:4){
cat(i,'- th cluster \n')
tmp = rbind(round(colMeans(cereals[which(groups==i),]), 3),
round(diag(cov(cereals[which(groups==i),])), 3)); rownames(tmp) = c("Mean","Var")
print(tmp)
}
Clu.Ave = cutree(cluster.EA, k=4)
Clu.Sig = cutree(cluster.ES, k=4)
Clu.Com = cutree(cluster.EC, k=4)
table(Clu.Ave, Clu.Sig)
table(Clu.Ave, Clu.Com)
table(Clu.Sig, Clu.Com)
table(groups)
for (i in 1:4){
cat(i,'- th cluster \n')
tmp = rbind(round(colMeans(cereals[which(groups==i),]), 3),
round(diag(cov(cereals[which(groups==i),])), 3)); rownames(tmp) = c("Mean","Var")
print(tmp)
}
Clu.Ave = cutree(cluster.EA, k=4)
Clu.Sig = cutree(cluster.ES, k=4)
Clu.Com = cutree(cluster.EC, k=4)
table(Clu.Ave, Clu.Sig)
table(Clu.Ave, Clu.Com)
table(Clu.Sig, Clu.Com)
# K-means 결과
library(cluster)
cluster.K4 = kmeans(cereals, centers=4)
cluster.K4
cmds = cmdscale(dist.E, k = 2)
head(cmds)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8)
#--- 다차원 척도법을 이용한 군집분석 시각화(p.81)
k1 = 4
groups = cutree(cluster.EC, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.ES, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.EA, k=k1)
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
# 초기값에 따른 군집분석의 차이
set.seed(1)
cluster1= kmeans(cereals, centers=4)
set.seed(2)
cluster2= kmeans(cereals, centers=4)
table(cluster1$cluster, cluster2$cluster)
cluster1$centers
cluster2$centers
cluster1$centers
cluster2$centers
table(cluster1$cluster, cluster2$cluster)
plot(cereals, col=cluster.K4$cluster) #k-means
table(cluster1$cluster, cluster2$cluster)
## 군집 수 K 정하기
### tot.withiness 군집내 거리의 합.
wss <- vector(length=15)
for (i in 1:15) wss[i] = kmeans(cereals,centers=i, nstart = 10)$tot.withinss
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main = "Total within SS for varying K")
cmds = cmdscale(dist.E, k = 2)
## k = 차원의 슈ㅜ,
head(cmds)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8)
#--- 다차원 척도법을 이용한 군집분석 시각화(p.81)
k1 = 4
groups = cutree(cluster.EC, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.ES, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.EA, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=cluster.K4$cluster)
#--- PCA 를 이용한 군집분석 시각화(p.78)
# PCA : 차원 축소 방법중 하나. 자료의 분산을 고유값 분해
pca <- princomp(cereals, cor=T)
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
haed(pca)
head(pca)
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.ES, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.EA, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=cluster.K4$cluster)
pca$scores[,1:2]
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
plot(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
library(scatterplot3d)
scatterplot3d()
scatterplot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
library(scatterplot3d)
scatterplot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
library(plot3d)
install.packages("plot3d")
library(plot3d)
library(rgl)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
library(rgl)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
pca$loadings
scatterplot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
scatterplot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
scatterplot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text(pca$loadings[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
plot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
plot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
scatterplot3d(pca$loadings[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$loadings[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
groups
pca$scores
rownames(pca) = ''
rowname(pca) = ''
rownames(pca) = 1
rownames(pca) = c(1)
rownames(pca)
View(pca)
text3d(pca$scores[,1:3], labels = rownames(pca$scores), cex=.8, col=groups)
plot3d(pca$scores[,1:3], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text3d(pc$scores[,1:3],texts= cereals[,"name"])
text3d(pc$scores[,1:3],xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text3d(pc$scores[,1:3],texts = rownames(cereals),xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
text3d(pca$scores[,1:3],texts = rownames(cereals),xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n",col=groups)
